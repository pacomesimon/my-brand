{
  "swagger": "2.0",
  "info": {
    "description": "This is a Swagger documentation of endpoints for Pacome's website backend API.",
    "version": "1.0.0",
    "title": "Pacome's Back-End",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "smbonimpa2011@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:5000",
  "basePath": "/api",
  "tags": [
    {
      "name": "users",
      "description": "Everything about Sign in and Sign up",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "queries",
      "description": "inquiries/queries of website's visitors"
    },
    {
      "name": "articles",
      "description": "articles on this website's blog"
    },
    {
      "name": "comments",
      "description": "comments on this website's articles (blog)"
    },
    {
      "name": "likes",
      "description": "likes on this website's articles (blog)"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "description": "",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide name, email and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: successfully signed up.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            },
            "headers": {
              "x-auth-token": {
                "type": "string",
                "description": "authentication token."
              }
            }
          },
          "400": {
            "description": "Email is already registered by another user.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "an unprovided variable is required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/changecreds": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Change a user's credentials",
        "description": "",
        "operationId": "changeCreds",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide name, email and/or password",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: successfully updated user's credentials.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            },
            "headers": {
              "x-auth-token": {
                "type": "string",
                "description": "authentication token."
              }
            }
          },
          "401": {
            "description": "Access denied. Invalid token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/promote/{id}": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "promote/demote a user to/from admin",
        "description": "",
        "operationId": "promote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to promote/demote",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: successfully updated user's credentials.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            },
            "headers": {
              "x-auth-token": {
                "type": "string",
                "description": "authentication token."
              }
            }
          },
          "401": {
            "description": "Access denied. Invalid token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Log in the system",
        "description": "",
        "operationId": "signIn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Provide email and password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSignin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: successfully signed in.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            },
            "headers": {
              "x-auth-token": {
                "type": "string",
                "description": "authentication token."
              }
            }
          },
          "400": {
            "description": "Email or password is invalid.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "an unprovided variable is required",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user's details by providing user._id",
        "description": "",
        "operationId": "getUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: user details delivered.",
            "schema": {
              "$ref": "#/definitions/UserRes"
            }
          },
          "404": {
            "description": "user_id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users' details",
        "description": "",
        "operationId": "getUsers",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: users' details delivered.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UsersRes"
              }
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/deleteuser/{id}": {
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user from database",
        "description": "",
        "operationId": "deleteUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted."
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "user id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queries/": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Get all queries' details",
        "description": "",
        "operationId": "getQueries",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: queries delivered.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/QueryRes"
              }
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queries": {
      "post": {
        "tags": [
          "queries"
        ],
        "summary": "Post a query",
        "description": "",
        "operationId": "postQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide a query message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: query delivered.",
            "schema": {
              "$ref": "#/definitions/QueryRes"
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/queries/{id}": {
      "delete": {
        "tags": [
          "queries"
        ],
        "summary": "Delete a query from database",
        "description": "",
        "operationId": "deleteQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of query to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Query deleted."
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "query id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/articles": {
      "post": {
        "tags": [
          "articles"
        ],
        "summary": "Post a article",
        "description": "",
        "operationId": "postArticle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide article contents",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ArticlePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: article delivered.",
            "schema": {
              "$ref": "#/definitions/ArticleRes"
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/articles/": {
      "get": {
        "tags": [
          "articles"
        ],
        "summary": "Get all articles' details",
        "description": "",
        "operationId": "getArticles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK: articles delivered.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ArticleRes"
              }
            }
          }
        }
      }
    },
    "/articles/{id}": {
      "get": {
        "tags": [
          "articles"
        ],
        "summary": "Get a article's details by providing article._id",
        "description": "",
        "operationId": "getArticle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of article to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: article details delivered.",
            "schema": {
              "$ref": "#/definitions/ArticleSingleRes"
            }
          },
          "404": {
            "description": "article_id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/articles/{id}/": {
      "patch": {
        "tags": [
          "articles"
        ],
        "summary": "Patch an article",
        "description": "",
        "operationId": "patchArticle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of article to patch",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide article contents",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ArticlePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: article patched.",
            "schema": {
              "$ref": "#/definitions/ArticleRes"
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/articleS/{id}": {
      "delete": {
        "tags": [
          "articles"
        ],
        "summary": "Delete an article from database",
        "description": "",
        "operationId": "deleteArticle",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of article to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Article deleted."
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "article id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments": {
      "post": {
        "tags": [
          "comments"
        ],
        "summary": "Post a comment",
        "description": "",
        "operationId": "postComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide a comment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CommentPost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: comment delivered.",
            "schema": {
              "$ref": "#/definitions/CommentRes"
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "tags": [
          "comments"
        ],
        "summary": "Get comments' details by providing article._id",
        "description": "",
        "operationId": "getComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of article for whose comments are to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: comments' details delivered.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommentRes"
              }
            }
          },
          "404": {
            "description": "article_id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments/{id}/": {
      "delete": {
        "tags": [
          "comments"
        ],
        "summary": "Delete a comment from database",
        "description": "",
        "operationId": "deleteComment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of comment to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Comment deleted."
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "comment id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/likes": {
      "post": {
        "tags": [
          "likes"
        ],
        "summary": "Post a like",
        "description": "",
        "operationId": "postLike",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Provide a like",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LikePost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: like delivered.",
            "schema": {
              "$ref": "#/definitions/LikeRes"
            }
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/likes/{id}": {
      "get": {
        "tags": [
          "likes"
        ],
        "summary": "Get likes' details by providing article._id",
        "description": "",
        "operationId": "getLike",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of article for whose likes are to return",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: likes' details delivered.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LikeRes"
              }
            }
          },
          "404": {
            "description": "article_id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/likes/{id}/": {
      "delete": {
        "tags": [
          "likes"
        ],
        "summary": "Delete a like from database",
        "description": "",
        "operationId": "deleteLike",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "x-auth-token",
            "type": "string",
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of like to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Like deleted."
          },
          "401": {
            "description": "invalid authentication token.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "like id does not exist.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Error"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserSignin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserSignin"
      }
    },
    "UserRes": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "membership": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserRes"
      }
    },
    "UsersRes": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "membership": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UsersRes"
      }
    },
    "QueryPost": {
      "type": "object",
      "properties": {
        "queryBody": {
          "type": "string"
        }
      },
      "xml": {
        "name": "QueryPost"
      }
    },
    "QueryRes": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "queryBody": {
          "type": "string"
        }
      },
      "xml": {
        "name": "QueryRes"
      }
    },
    "ArticlePost": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "previewImageURL": {
          "type": "string"
        },
        "articleBody": {
          "type": "string"
        }
      },
      "xml": {
        "name": "ArticlePost"
      }
    },
    "ArticleRes": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "previewImageURL": {
          "type": "string"
        },
        "articleBody": {
          "type": "string"
        },
        "authorID": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "readingTime": {
          "type": "string"
        }
      },
      "xml": {
        "name": "ArticleRes"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ArticleSingleRes": {
      "type": "object",
      "properties": {
        "article": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "previewImageURL": {
              "type": "string"
            },
            "articleBody": {
              "type": "string"
            },
            "authorID": {
              "type": "string"
            },
            "date": {
              "type": "string"
            },
            "subject": {
              "type": "string"
            },
            "readingTime": {
              "type": "string"
            }
          }
        },
        "likes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "articleID": {
                "type": "string"
              },
              "userID": {
                "type": "string"
              }
            }
          }
        },
        "comments": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "articleID": {
                "type": "string"
              },
              "userID": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "commentBody": {
                "type": "string"
              }
            }
          }
        }
      },
      "xml": {
        "name": "ArticleSingleRes"
      }
    },
    "CommentPost": {
      "type": "object",
      "properties": {
        "articleID": {
          "type": "string"
        },
        "commentBody": {
          "type": "string"
        }
      },
      "xml": {
        "name": "CommentPost"
      }
    },
    "CommentRes": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "articleID": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "commentBody": {
          "type": "string"
        }
      },
      "xml": {
        "name": "CommentRes"
      }
    },
    "LikePost": {
      "type": "object",
      "properties": {
        "articleID": {
          "type": "string"
        }
      },
      "xml": {
        "name": "LikePost"
      }
    },
    "LikeRes": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "articleID": {
          "type": "string"
        },
        "userID": {
          "type": "string"
        }
      },
      "xml": {
        "name": "LikeRes"
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}